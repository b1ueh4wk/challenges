Notes on dyte research:

Basically from what I can see during this research is that the Dyte SDK provides for us most of the functionality to build a WebRTC video conferencing app. As I read more, I'm
not sure if this is actually something we want to use. It is literally going to do most of the work for us. On the flip side, we would be able to create the application very
quickly. But from a learning perspective, we would skip over a lot of stuff that we would otherwise be building ourselves, and instead just including a dyte component via react.
This being said, I suppose we don't have to use all of Dyte's offerings. We could use just one part of the kit, and build the rest of the project from scratch. For example, we could
just use Dyte's API call for creating host to host video connection, and build the UI ourselves on top of this.

  * Dyte's live video platform is built upon WebRTC
  * Using Dyte API/ client side SDK, acquire, transmit and play media while managing network connections efficiently in application

    Integrate Dyte UI Kit into project: <DyteMeeting /> and pass initialized "meeting" object to it. "You can use prebuilt <DyteMeeting /> component to create your meeting quickly. With this component, you don't have to handle all the states, dialogs, and other aspects of managing the application. The UI kit also respect your permissions and theming configuration from the preset." It also seems like we can design custom components based off of their pre-existing components to conform to our needs: "Use some components from our component library, build some custom components yourself"
      * This seems to have multiple branches of options for usage attached to it, including:
        * Audio specific meeting
        * Video meeting
        * Text chat

        Link to React UI Kit usages and custom components: https://docs.dyte.io/react-ui-kit

    Background transformer: use @dytesdk/video-background-transformer package



